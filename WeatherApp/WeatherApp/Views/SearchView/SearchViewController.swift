//
//  SearchViewController.swift
//  WeatherApp
//
//  Created by Ximena Rotceh Mendoza Gamino on 14/05/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class SearchViewController: UIViewController
{

  
    @IBOutlet weak var cityTable: UITableView!

    var city = [City]()
    let searchController =  UISearchController()
    var viewModel = WeatherViewModel()
    var router = Router()
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
 
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
  
  }
 
  
  // MARK: Setup
    func initSearchController() {
        searchController.loadViewIfNeeded()
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.enablesReturnKeyAutomatically = false
        searchController.searchBar.returnKeyType = UIReturnKeyType.done
        definesPresentationContext =  true
        
        
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        searchController.searchBar.delegate = self
        
    }
    
    func initTable()
    {
        cityTable.dataSource = self
        cityTable.delegate = self
    }
    func configureViewController() {
        self.city = self.viewModel.showCities()
        self.cityTable.reloadData()
    }
  

  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        initSearchController()
        initTable()
        configureViewController()
     
    }

  
}
extension SearchViewController: UISearchResultsUpdating, UISearchBarDelegate
{
    func updateSearchResults(for searchController: UISearchController) {
        let searchBar =  searchController.searchBar
        
    }
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let cityName = searchBar.text?.trimmingCharacters(in: .whitespacesAndNewlines),
              !cityName.isEmpty else { return }

        self.viewModel.saveCity(cityName: cityName)
        self.city = self.viewModel.showCities()
        self.cityTable.reloadData()
        searchBar.resignFirstResponder()
      


    }

    
}

extension SearchViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return city.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cellCity  = (tableView.dequeueReusableCell(withIdentifier: "CityTableViewCell", for: indexPath) as! CityTableViewCell)
        cellCity.city = self.city.count > 0 ? self
            .city[indexPath.row] : nil
           
        return cellCity
    }
    func tableView(
        _ tableView: UITableView,
        commit editingStyle: UITableViewCell.EditingStyle,
        forRowAt indexPath: IndexPath
    ) {
        if editingStyle == .delete {
            viewModel.deleteCities(city: city[indexPath.row])
        }
        self.city = self.viewModel.showCities()
        cityTable.reloadData()
    }
    
    func tableView(
        _ tableView: UITableView,
        didSelectRowAt indexPath: IndexPath
    ) {
        router.navigateToResult()
    }

}
